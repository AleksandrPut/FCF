//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\putilov_aa\source\repos\FCF\FCF\FCF_1_2.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: putilov_aa
//              Version: NX 10
//              Date: 04-26-2024  (Format: mm-dd-yyyy)
//              Time: 05:56 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "FCF_1_2.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;



#define UF_CALL(X) (report( __FILE__, __LINE__, #X, (X)))
static int report(char* file, int line, char* call, int irc)
{
    if (irc)
    {
        char    messg[133];
        printf("%s, line %d:  %s\n", file, line, call);
        (UF_get_fail_message(irc, messg)) ?
            printf("    returned a %d\n", irc) :
            printf("    returned error %d:  %s\n", irc, messg);
    }
    return(irc);
}


void create_FCF(my_motion_data_t    my_data);


//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(FCF_1_2::theSession) = NULL;
UI *(FCF_1_2::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
FCF_1_2::FCF_1_2()
{
    try
    {
        // Initialize the NX Open C++ API environment
        FCF_1_2::theSession = NXOpen::Session::GetSession();
        FCF_1_2::theUI = UI::GetUI();
        theDlxFileName = "C:\\Users\\putilov_aa\\source\\repos\\FCF\\FCF\\FCF_1_2.dlx";
        theDialog = FCF_1_2::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddUpdateHandler(make_callback(this, &FCF_1_2::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &FCF_1_2::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &FCF_1_2::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
FCF_1_2::~FCF_1_2()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    FCF_1_2 *theFCF_1_2 = NULL;
    try
    {
        theFCF_1_2 = new FCF_1_2();
        // The following method shows the dialog immediately
        theFCF_1_2->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FCF_1_2::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theFCF_1_2 != NULL)
    {
        delete theFCF_1_2;
        theFCF_1_2 = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FCF_1_2::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int FCF_1_2::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FCF_1_2::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void FCF_1_2::initialize_cb()
{
    try
    {
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        enum_Characteristic = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum_Characteristic"));
        enum_Style = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum_Style"));
        group = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group"));
        enum0 = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum0"));
        string_Allow = dynamic_cast<NXOpen::BlockStyler::StringBlock*>(theDialog->TopBlock()->FindBlock("string_Allow"));
        enum01 = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum01"));
        group_AccessModifiers = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group_AccessModifiers"));
        toggle_FreeState = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle_FreeState"));
        toggle_TangentPlane = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle_TangentPlane"));
        toggle_Projected = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle_Projected"));
        string_Projected = dynamic_cast<NXOpen::BlockStyler::StringBlock*>(theDialog->TopBlock()->FindBlock("string_Projected"));
        toggle_CircleU = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle_CircleU"));
        string_CircleU = dynamic_cast<NXOpen::BlockStyler::StringBlock*>(theDialog->TopBlock()->FindBlock("string_CircleU"));
        toggle_Statistical = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle_Statistical"));
        toggle_CommonArea = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle_CommonArea"));
        toggle_Max = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle_Max"));
        string_Max = dynamic_cast<NXOpen::BlockStyler::StringBlock*>(theDialog->TopBlock()->FindBlock("string_Max"));
        group1 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group1"));
        button0 = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("button0"));
        point0 = dynamic_cast<NXOpen::BlockStyler::SpecifyPoint*>(theDialog->TopBlock()->FindBlock("point0"));
    
    

        string_Allow->SetValue("0.0");
        string_Projected->SetValue("0.0");
        string_CircleU->SetValue("0.0");
        string_Max->SetValue("0.0");



        string_Projected->SetEnable(false);
        string_CircleU->SetEnable(false);
        string_Max->SetEnable(false);



        enum_Style->SetEnable(false);

        point0->SetEnable(false);

        /*toggle_FreeState->SetValue(false);
        toggle_TangentPlane->SetValue(false);
        toggle_Projected->SetValue(false);
        toggle_CircleU->SetValue(false);
        toggle_Statistical->SetValue(false);
        toggle_CommonArea->SetValue(false);
        toggle_Max->SetValue(false);*/

        /*PropertyList* enum0Props = enum0->GetProperties();
        int EnumValue = enum0Props->GetEnum("Value");
        delete enum0Props;
        enum0Props = NULL;

        enum0->GetProperties()->SetEnum("Value", 0);
        if (EnumValue == 0)
        {

            group02->SetShow(false);

        }
        else if (EnumValue == 1)
        {

            group02->SetShow(true);

        }*/

    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FCF_1_2::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void FCF_1_2::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FCF_1_2::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int FCF_1_2::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == enum_Characteristic)
        {
        //---------Enter your code here-----------
        }
        else if(block == enum_Style)
        {
        //---------Enter your code here-----------
        }
        else if(block == enum0)
        {
        //---------Enter your code here-----------
        }
        else if(block == string_Allow)
        {
        //---------Enter your code here-----------
        }
        else if(block == enum01)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle_FreeState)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle_TangentPlane)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle_Projected)
        {
        //---------Enter your code here-----------
            if (toggle_Projected->Value())
            {
                string_Projected->SetEnable(true);
            }
            else
            {
                string_Projected->SetEnable(false);
            }
        }
        else if(block == string_Projected)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle_CircleU)
        {
        //---------Enter your code here-----------
            if (toggle_CircleU->Value() == TRUE)
            {
                string_CircleU->SetEnable(true);
            }
            else
            {
                string_CircleU->SetEnable(false);
            }
        }
        else if(block == string_CircleU)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle_Statistical)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle_CommonArea)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle_Max)
        {
        //---------Enter your code here-----------
            if (toggle_Max->Value() == TRUE)
            {
                string_Max->SetEnable(true);
            }
            else
            {
                string_Max->SetEnable(false);
            }
        }
        else if(block == string_Max)
        {
        //---------Enter your code here-----------
        }
        else if(block == button0)
        {
        //---------Enter your code here-----------
            display_FCF();
        }
        else if(block == point0)
        {
        //---------Enter your code here-----------
            display_FCF();
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FCF_1_2::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* FCF_1_2::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}


void FCF_1_2::display_FCF()
{
    int     pos_resp;
    tag_t   view_tag;
    double  arc_edge_pos[3];
    UF_CURVE_arc_t      arc;
    my_motion_data_t    my_data;

    count = 0;
    int const_size = 3;

    if (toggle_FreeState->Value() == TRUE) count += const_size;
    if (toggle_TangentPlane->Value() == TRUE) count += const_size;
    if (toggle_Projected->Value() == TRUE) count += const_size;
    if (toggle_CircleU->Value() == TRUE) count += const_size;
    if (toggle_Statistical->Value() == TRUE) count += const_size;
    if (toggle_CommonArea->Value() == TRUE) count += const_size;
    if (toggle_Max->Value() == TRUE) count += const_size;


    std::string str = string_Allow->Value().GetLocaleText();
    count += str.size() * const_size;
    str = string_Projected->Value().GetLocaleText();
    if (toggle_Projected->Value() == TRUE)count += str.size() * const_size;
    str = string_CircleU->Value().GetLocaleText();
    if (toggle_CircleU->Value() == TRUE) count += str.size() * const_size;
    str = string_Max->Value().GetLocaleText();
    if (toggle_Max->Value() == TRUE) count += str.size() * const_size;


    size_string(count, enum_Characteristic->ValueAsString(), enum_Style->ValueAsString(),
        enum0->ValueAsString(), enum01->ValueAsString());

    UF_MTX3_vec_multiply(my_data.abs_ctr, my_data.matrix, arc.arc_center);
    UF_UI_specify_screen_position(
        const_cast<char*>("Indicate arc radius"),
        (UF_UI_motion_fn_t)motion_cb, (void*)&my_data, arc_edge_pos, &view_tag, &pos_resp);
    if (pos_resp == UF_UI_PICK_RESPONSE) // && (pos_resp != UF_UI_CANCEL));
    {
        create_FCF(arc_edge_pos);
        //create_callout(string0, arc_edge_pos, &my_data, point0);
    }
    UF_DISP_refresh();
    theDialog->PerformApply();/**/

}

void FCF_1_2::create_FCF(double* arc_edge_pos)//my_motion_data_t    my_data)
{
    create_allow_udo
    (
        enum_Characteristic->ValueAsString(),
        enum_Style->ValueAsString(),
        enum0->ValueAsString(),
        string_Allow->Value(),
        enum01->ValueAsString(),
        toggle_FreeState->Value(),
        toggle_TangentPlane->Value(),
        toggle_Projected->Value(),
        string_Projected->Value(),
        toggle_CircleU->Value(),
        string_CircleU->Value(),
        toggle_Statistical->Value(),
        toggle_CommonArea->Value(),
        toggle_Max->Value(),
        string_Max->Value(),
        arc_edge_pos
    );
}